// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoAPI.Data;

namespace ProjetoAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("AtendimentoCachorro", b =>
                {
                    b.Property<int>("AtendimentosId")
                        .HasColumnType("int");

                    b.Property<int>("CachorrosId")
                        .HasColumnType("int");

                    b.HasKey("AtendimentosId", "CachorrosId");

                    b.HasIndex("CachorrosId");

                    b.ToTable("AtendimentoCachorro");

                    b.HasData(
                        new
                        {
                            AtendimentosId = 1,
                            CachorrosId = 8
                        },
                        new
                        {
                            AtendimentosId = 2,
                            CachorrosId = 2
                        },
                        new
                        {
                            AtendimentosId = 3,
                            CachorrosId = 1
                        },
                        new
                        {
                            AtendimentosId = 4,
                            CachorrosId = 3
                        },
                        new
                        {
                            AtendimentosId = 5,
                            CachorrosId = 4
                        },
                        new
                        {
                            AtendimentosId = 6,
                            CachorrosId = 5
                        },
                        new
                        {
                            AtendimentosId = 7,
                            CachorrosId = 6
                        },
                        new
                        {
                            AtendimentosId = 8,
                            CachorrosId = 7
                        });
                });

            modelBuilder.Entity("ProjetoAPI.Models.Atendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataEntrada")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("longtext");

                    b.Property<string>("Temperamento")
                        .HasColumnType("longtext");

                    b.Property<int>("VeterinarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("VeterinarioId");

                    b.ToTable("Atendimentos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 1,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4403),
                            Diagnostico = "Animal com fortes dores na região do torax.",
                            Temperamento = "Agressivo",
                            VeterinarioId = 2
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 1,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4778),
                            Diagnostico = "Animal com dores na região da barriga.",
                            Temperamento = "Passivo",
                            VeterinarioId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 2,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4784),
                            Diagnostico = "Animal registrado para vacinação.",
                            Temperamento = "Sociável",
                            VeterinarioId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClienteId = 2,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4785),
                            Diagnostico = "Animal apresentou-se com desânimo e vômito.",
                            Temperamento = "Passivo",
                            VeterinarioId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClienteId = 3,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4787),
                            Diagnostico = "Animal registrado para vacinação",
                            Temperamento = "Sociável",
                            VeterinarioId = 3
                        },
                        new
                        {
                            Id = 6,
                            ClienteId = 3,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4788),
                            Diagnostico = "Animal registrado para castração",
                            Temperamento = "Passivo",
                            VeterinarioId = 3
                        },
                        new
                        {
                            Id = 7,
                            ClienteId = 3,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4790),
                            Diagnostico = "Animal registrado para vacinação",
                            Temperamento = "Agressivo",
                            VeterinarioId = 3
                        },
                        new
                        {
                            Id = 8,
                            ClienteId = 4,
                            DataEntrada = new DateTime(2022, 7, 28, 21, 45, 0, 291, DateTimeKind.Local).AddTicks(4791),
                            Diagnostico = "Animal com perna direita traseira supostamente fraturada",
                            Temperamento = "Agressivo",
                            VeterinarioId = 2
                        });
                });

            modelBuilder.Entity("ProjetoAPI.Models.Cachorro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("NomeCachorro")
                        .HasColumnType("longtext");

                    b.Property<string>("Raca")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Cachorros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClienteId = 2,
                            NomeCachorro = "Floquinho",
                            Raca = "Dálmata"
                        },
                        new
                        {
                            Id = 2,
                            ClienteId = 1,
                            NomeCachorro = "Rex",
                            Raca = "PitBull"
                        },
                        new
                        {
                            Id = 3,
                            ClienteId = 2,
                            NomeCachorro = "Fred",
                            Raca = "HuskySiberiano"
                        },
                        new
                        {
                            Id = 4,
                            ClienteId = 3,
                            NomeCachorro = "Lilica",
                            Raca = "Yorkshire"
                        },
                        new
                        {
                            Id = 5,
                            ClienteId = 3,
                            NomeCachorro = "Penélope",
                            Raca = "Poodle"
                        },
                        new
                        {
                            Id = 6,
                            ClienteId = 3,
                            NomeCachorro = "Hulk",
                            Raca = "Rottweiler"
                        },
                        new
                        {
                            Id = 7,
                            ClienteId = 4,
                            NomeCachorro = "Yoda",
                            Raca = "Pinscher"
                        },
                        new
                        {
                            Id = 8,
                            ClienteId = 1,
                            NomeCachorro = "Merlim",
                            Raca = "PastorAlemão"
                        });
                });

            modelBuilder.Entity("ProjetoAPI.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomeCliente")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NomeCliente = "Clecio"
                        },
                        new
                        {
                            Id = 2,
                            NomeCliente = "Frederico"
                        },
                        new
                        {
                            Id = 3,
                            NomeCliente = "Pedro"
                        },
                        new
                        {
                            Id = 4,
                            NomeCliente = "Kestrel"
                        });
                });

            modelBuilder.Entity("ProjetoAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Veterinario@gft.com",
                            Senha = "Gft@1234"
                        });
                });

            modelBuilder.Entity("ProjetoAPI.Models.Veterinario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomeVeterinario")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Veterinarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NomeVeterinario = "Dr.Faust"
                        },
                        new
                        {
                            Id = 2,
                            NomeVeterinario = "Dr.David Banner"
                        },
                        new
                        {
                            Id = 3,
                            NomeVeterinario = "Dra.Potter"
                        });
                });

            modelBuilder.Entity("AtendimentoCachorro", b =>
                {
                    b.HasOne("ProjetoAPI.Models.Atendimento", null)
                        .WithMany()
                        .HasForeignKey("AtendimentosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoAPI.Models.Cachorro", null)
                        .WithMany()
                        .HasForeignKey("CachorrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetoAPI.Models.Atendimento", b =>
                {
                    b.HasOne("ProjetoAPI.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoAPI.Models.Veterinario", "Veterinario")
                        .WithMany()
                        .HasForeignKey("VeterinarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Veterinario");
                });

            modelBuilder.Entity("ProjetoAPI.Models.Cachorro", b =>
                {
                    b.HasOne("ProjetoAPI.Models.Cliente", "cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cliente");
                });
#pragma warning restore 612, 618
        }
    }
}
